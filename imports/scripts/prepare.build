<?xml version="1.0" ?>
<project basedir=".." default="build">
  <property name="sharpGitDir" value="${downloads}/../.." overwrite="false" />

  <property name="nunitFilename" value="NUnit-${nunitVersion}.zip" />
  <property name="nunitDir" value="${'build/NUnit-' + nunitVersion}" />
  
  <regex pattern="^(?'nunitVersionMMR'\d+\.\d+(\.\d+))" input="${nunitVersion}" />
  <property name="nunitDir" value="${'build/nunit-' + nunitVersion}" />

  <regex pattern="^(?'cmakeVersionMM'\d+\.\d+)" input="${cmakeVersion}" />
  <property name="cmakeFilename" value="cmake-${cmakeVersion}-win32-x86.zip" />
  <property name="cmakeDir" value="build/cmake-${cmakeVersion}-win32-x86" />

  <property name="nasmFilename" value="nasm-${nasmVersion}-win32.zip" />
  <property name="nasmDir" value="${buildRoot}\nasm-${nasmVersion}" />
  
  <property name="ltcgFlags" value="" />
  <property name="ltcgFlags" value="-GL" if="${ltcg}" />
  <property name="ltcgFlags" value="${ltcgFlags} -Gw" if="${int::parse(VSversion) &gt;= 2013}" />

  <target name="download" depends="initialize-layout">
    <mkdir dir="${downloads}" />

    <get
      src="http://github.com/nunit/nunitv2/releases/download/${nunitVersionMMR}/${nunitFilename}"
      dest="${downloads + nunitFilename}"
      unless="${file::exists(downloads + nunitFilename)}" />

    <get src="http://www.cmake.org/files/v${cmakeVersionMM}/${cmakeFilename}"
      dest="${downloads + cmakeFilename}"
      unless="${file::exists(downloads + cmakeFilename)}" />
  </target>

  <target name="extract" depends="download">
    <mkdir dir="build" />

    <unzip
      zipfile="${downloads + nunitFilename}"
      todir="build"
      unless="${directory::exists(nunitDir)}" />

    <get src="http://www.nasm.us/pub/nasm/releasebuilds/${nasmVersion}/win32/${nasmFilename}"
      dest="${downloads + nasmFilename}"
      unless="${file::exists(downloads + nasmFilename)}" />

    <unzip
      zipfile="${downloads + nasmFilename}"
      todir="build"
      unless="${directory::exists(nasmDir)}" />
      
    <unzip
      zipfile="${downloads + cmakeFilename}"
      todir="build"
      unless="${directory::exists(cmakeDir)}" />
  </target>
  <target name="checkout" depends="initialize-layout">
    <Svn
      verbose="true"
      unless="${directory::exists(zlibDir)}">

      <arg value="co" />
      <arg value="https://github.com/madler/zlib.git/tags/v${zlibVersion}/" />
      <arg value="${zlibDir}" />
    </Svn>

    <Svn
      verbose="true"
      unless="${directory::exists(opensslDir)}">
      
      <arg value="co" />
      <arg value="https://github.com/openssl/openssl.git/tags/OpenSSL_${string::replace(opensslVersion,'.','_')}/" />
      <arg value="${opensslDir}" />
    </Svn>

    <Svn
      verbose="true"
      unless="${directory::exists(aprDir)}">

      <arg value="co" />
      <arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr/tags/${aprVersion}/" />
      <arg value="${aprDir}" />
    </Svn>
    
    <Svn
      verbose="true"
      unless="${directory::exists(aprUtilDir)}">

      <arg value="co" />
      <arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr-util/tags/${aprUtilVersion}/" />
      <arg value="${aprUtilDir}" />
    </Svn>

    <Svn
      verbose="true"
      if="${file::exists(aprUtilDir + '/xml/expat/lib/map_osd_ebcdic_df04_1.h')}">

      <arg value="up" />
      <arg line="--set-depth exclude" />
      <arg line="${aprUtilDir + '/xml/expat/lib'}" />
    </Svn>

    <Svn
      verbose="true"
      unless="${directory::exists(aprUtilDir + '/xml/expat/lib')}">

      <arg value="co" />
      <arg value="https://github.com/libexpat/libexpat.git/tags/R_${string::replace(expatVersion,'.','_')}/expat/lib/" />
      <arg value="${aprUtilDir + '/xml/expat/lib'}" />
    </Svn>

    <Svn unless="${directory::exists(libgit2Dir)}">
      <arg value="co" />
      <arg value="https://github.com/libgit2/libgit2/trunk/"                      if="${libgit2BuildType == 'trunk'}" />
      <arg value="https://github.com/libgit2/libgit2/tags/v${libgit2Version}/"    if="${libgit2BuildType == 'tag'}" />
      <arg value="https://github.com/libgit2/libgit2/branches/${libgit2Version}/" if="${libgit2BuildType == 'branch'}" />
      <arg value="${libgit2Dir}" />
    </Svn>

    <Svn unless="${directory::exists(libssh2Dir)}">
      <arg value="co" />
      <arg value="https://github.com/libssh2/libssh2/trunk/"                            if="${libssh2BuildType == 'trunk'}" />
      <arg value="https://github.com/libssh2/libssh2/tags/libssh2-${libssh2Version}"    if="${libssh2BuildType == 'tag'}" />
      <arg value="${libssh2Dir}" />
    </Svn>

  </target>

  <filterchain id="license-filter">
    <LineRegexReplace re='(?&lt;!\r)\n' to='&#x0D;&#x0A;' />
  </filterchain>
  <target name="copy-licenses">
    <copy
      file="${aprDir}/LICENSE"
      tofile="release/licenses/Apr-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${aprUtilDir}/LICENSE"
      tofile="release/licenses/Apr-Util-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${opensslDir}/LICENSE"
      tofile="release/licenses/OpenSsl-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${zlibDir}/README"
      tofile="release/licenses/ZLib-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${libssh2Dir}/COPYING"
      tofile="release/licenses/LibSSH2-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${libgit2Dir}/COPYING"
      tofile="release/licenses/Libgit2-License.txt">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${sharpGitDir}/LICENSE.txt"
      tofile="release/licenses/SharpGit-License.txt"
      if="${file::exists(sharpGitDir + '/LICENSE.txt')}">
      <filterchain refid="license-filter" />
    </copy>
    <copy
      file="${downloads}/../scripts/SharpGit-Licenses.wxs"
      tofile="release/licenses/SharpGit-Licenses.wxs" />
  </target>
</project>
