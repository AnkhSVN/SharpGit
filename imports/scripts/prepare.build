<?xml version="1.0" ?>
<project basedir=".." default="build">
  <property name="sharpSvnDir" value="${downloads}/../.." overwrite="false" />

  <property name="nunitFilename" value="NUnit-${nunitVersion}.zip" />
  <property name="nunitDir" value="${'build/NUnit-' + nunitVersion}" />
  
  <regex pattern="^(?'nunitVersionMMR'\d+\.\d+(\.\d+))" input="${nunitVersion}" />
  <property name="nunitDir" value="${'build/nunit-' + nunitVersion}" />

  <regex pattern="^(?'cmakeVersionMM'\d+\.\d+)" input="${cmakeVersion}" />
  <property name="cmakeFilename" value="cmake-${cmakeVersion}-win32-x86.zip" />
  <property name="cmakeDir" value="build/cmake-${cmakeVersion}-win32-x86" />

  <property name="ltcgFlags" value="" />
  <property name="ltcgFlags" value="-GL" if="${ltcg}" />
  <property name="ltcgFlags" value="${ltcgFlags} -Gw" if="${int::parse(VSversion) &gt;= 2013}" />

  <target name="download" depends="initialize-layout">
    <mkdir dir="${downloads}" />

    <get
      src="http://launchpad.net/nunitv2/trunk/${nunitVersionMMR}/+download/${nunitFilename}"
      dest="${downloads + nunitFilename}"
      unless="${file::exists(downloads + nunitFilename)}" />

    <get src="http://www.cmake.org/files/v${cmakeVersionMM}/${cmakeFilename}"
      dest="${downloads + cmakeFilename}"
      unless="${file::exists(downloads + cmakeFilename)}" />
  </target>

  <target name="extract" depends="download">
    <mkdir dir="build" />

    <unzip
      zipfile="${downloads + nunitFilename}"
      todir="build"
      unless="${directory::exists(nunitDir)}" />
      
    <unzip
      zipfile="${downloads + cmakeFilename}"
      todir="build"
      unless="${directory::exists(cmakeDir)}" />
  </target>
  <target name="checkout" depends="initialize-layout">
    <Svn
      verbose="true"
      unless="${directory::exists(zlibDir)}">

      <arg value="co" />
      <arg value="https://github.com/madler/zlib.git/tags/v${zlibVersion}/" />
      <arg value="${zlibDir}" />
    </Svn>
    
    <Svn
      verbose="true"
      unless="${directory::exists(aprDir)}">

      <arg value="co" />
      <arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr/tags/${aprVersion}/" />
      <arg value="${aprDir}" />
    </Svn>
    
    <Svn
      verbose="true"
      unless="${directory::exists(aprUtilDir)}">

      <arg value="co" />
      <arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr-util/tags/${aprUtilVersion}/" />
      <arg value="${aprUtilDir}" />
    </Svn>

    <Svn
      verbose="true"
      if="${file::exists(aprUtilDir + '/xml/expat/lib/map_osd_ebcdic_df04_1.h')}">

      <arg value="up" />
      <arg line="--set-depth exclude" />
      <arg line="${aprUtilDir + '/xml/expat/lib'}" />
    </Svn>

    <Svn
      verbose="true"
      unless="${directory::exists(aprUtilDir + '/xml/expat/lib')}">

      <arg value="co" />
      <arg value="https://github.com/LuaDist/libexpat.git/tags/${expatVersion}/lib" />
      <arg value="${aprUtilDir + '/xml/expat/lib'}" />
    </Svn>

    <Svn unless="${directory::exists(libgit2Dir)}" if="${buildLibgit2}" >
      <arg value="co" />
      <arg value="https://github.com/libgit2/libgit2.git/trunk/" if="${libgit2BuildType == 'trunk'}" />
      <arg value="https://github.com/libgit2/libgit2.git/tags/v${libgit2Version}/" if="${libgit2BuildType == 'tag'}" />
      <arg value="https://github.com/libgit2/libgit2.git/branches/${libgit2Version}/" if="${libgit2BuildType == 'branch'}" />
      <arg value="${libgit2Dir}" />
    </Svn>
    
    <Svn unless="${directory::exists(libssh2Dir)}" if="${buildLibssh2}">
      <arg value="co" />
      <arg value="https://github.com/rhuijben/libssh2/tags/libssh2-${libssh2Version}" />
      <arg value="${libssh2Dir}" />
    </Svn>

  </target>

  <target name="copy-licenses">
    <copy
			file="${aprDir}/LICENSE"
			tofile="release/licenses/Apr-License.txt" />
    <copy
			file="${zlibDir}/README"
			tofile="release/licenses/ZLib-License.txt" />
    <copy if="${buildLibssh2}"
		  file="${libssh2Dir}/COPYING"
		  tofile="release/licenses/LibSSH2.txt" />

    <copy
			file="${sharpSvnDir}/LICENSE.txt"
			tofile="release/licenses/SharpSvn-License.txt"
			if="${file::exists(sharpSvnDir + '/LICENSE.txt')}"/>
    <copy
			file="${downloads}/../scripts/SharpSvn-Licenses.wxs"
			tofile="release/licenses/SharpSvn-Licenses.wxs" />
  </target>
</project>
